import numpy as np
import math
from sklearn.decomposition import PCA
from sklearn.metrics import mean_squared_error

data1 = np.array([[[-0.4705521 ,  0.40878817,  1.179     ],
        [-0.46863303,  0.40878817,  1.179     ],
        [-0.4667139 ,  0.40878817,  1.179     ],
        [-0.46479484,  0.40878817,  1.179     ],
        [-0.46287575,  0.40878817,  1.179     ],
        [-0.4609567 ,  0.40878817,  1.179     ],
        [-0.45981634,  0.40948164,  1.1810001 ],
        [-0.457894  ,  0.40948164,  1.1810001 ],
        [-0.4559717 ,  0.40948164,  1.1810001 ],
        [-0.45404935,  0.40948164,  1.1810001 ]],

       [[ 0.4777415 ,  0.4334056 ,  1.25      ],
        [ 0.47977614,  0.4334056 ,  1.25      ],
        [ 0.47988355,  0.43167198,  1.245     ],
        [ 0.48191005,  0.43167198,  1.245     ],
        [ 0.48393655,  0.43167198,  1.245     ],
        [ 0.4859631 ,  0.43167198,  1.245     ],
        [ 0.48916548,  0.43271217,  1.248     ],
        [ 0.49198404,  0.4334056 ,  1.25      ],
        [ 0.49401867,  0.4334056 ,  1.25      ],
        [ 0.49724385,  0.43444577,  1.253     ]],

       [[ 0.1513457 ,  0.43300056,  1.243     ],
        [ 0.15336896,  0.43300056,  1.243     ],
        [ 0.15564224,  0.43369725,  1.245     ],
        [ 0.15766875,  0.43369725,  1.245     ],
        [ 0.15969527,  0.43369725,  1.245     ],
        [ 0.16172177,  0.43369725,  1.245     ],
        [ 0.16374826,  0.43369725,  1.245     ],
        [ 0.16577479,  0.43369725,  1.245     ],
        [ 0.16780129,  0.43369725,  1.245     ],
        [ 0.16955498,  0.43300056,  1.243     ]],

       [[-0.16530225,  0.4171737 ,  1.192     ],
        [-0.16336201,  0.4171737 ,  1.192     ],
        [-0.16142178,  0.4171737 ,  1.192     ],
        [-0.15988292,  0.41822365,  1.195     ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ]],

       [[-0.4669601 ,  0.41137752,  1.1700001 ],
        [-0.46505567,  0.41137752,  1.1700001 ],
        [-0.46315122,  0.41137752,  1.1700001 ],
        [-0.4612468 ,  0.41137752,  1.1700001 ],
        [-0.4593424 ,  0.41137752,  1.1700001 ],
        [-0.45743796,  0.41137752,  1.1700001 ],
        [-0.45553353,  0.41137752,  1.1700001 ],
        [-0.4536291 ,  0.41137752,  1.1700001 ],
        [-0.45172468,  0.41137752,  1.1700001 ],
        [-0.44982025,  0.41137752,  1.1700001 ]],

       [[ 0.4674223 ,  0.43001255,  1.223     ],
        [ 0.469413  ,  0.43001255,  1.223     ],
        [ 0.4714037 ,  0.43001255,  1.223     ],
        [ 0.47416854,  0.43071577,  1.225     ],
        [ 0.4773286 ,  0.4317706 ,  1.228     ],
        [ 0.47932747,  0.4317706 ,  1.228     ],
        [ 0.4813263 ,  0.4317706 ,  1.228     ],
        [ 0.48332512,  0.4317706 ,  1.228     ],
        [ 0.48611438,  0.43247378,  1.23      ],
        [ 0.48811647,  0.43247378,  1.23      ]],

       [[ 0.14805824,  0.42952946,  1.2160001 ],
        [ 0.15003754,  0.42952946,  1.2160001 ],
        [ 0.15251689,  0.43094236,  1.22      ],
        [ 0.15424944,  0.4302359 ,  1.218     ],
        [ 0.156232  ,  0.4302359 ,  1.218     ],
        [ 0.15821455,  0.4302359 ,  1.218     ],
        [ 0.16019711,  0.4302359 ,  1.218     ],
        [ 0.16244598,  0.43094236,  1.22      ],
        [ 0.16510569,  0.4327085 ,  1.225     ],
        [ 0.16709964,  0.4327085 ,  1.225     ]],

       [[-0.16280606,  0.41660354,  1.174     ],
        [-0.16089514,  0.41660354,  1.174     ],
        [-0.1589842 ,  0.41660354,  1.174     ],
        [-0.15707326,  0.41660354,  1.174     ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ],
        [-0.        ,  0.        ,  0.        ]],

       [[-0.4589779 ,  0.40995768,  1.1500001 ],
        [-0.45710602,  0.40995768,  1.1500001 ],
        [-0.4552341 ,  0.40995768,  1.1500001 ],
        [-0.45336226,  0.40995768,  1.1500001 ],
        [-0.45149037,  0.40995768,  1.1500001 ],
        [-0.44961852,  0.40995768,  1.1500001 ],
        [-0.44774663,  0.40995768,  1.1500001 ],
        [-0.44587478,  0.40995768,  1.1500001 ],
        [-0.4440029 ,  0.40995768,  1.1500001 ],
        [-0.442131  ,  0.40995768,  1.1500001 ]],

       [[ 0.4574853 ,  0.42671245,  1.197     ],
        [ 0.45943365,  0.42671245,  1.197     ],
        [ 0.46138203,  0.42671245,  1.197     ],
        [ 0.4633304 ,  0.42671245,  1.197     ],
        [ 0.46527877,  0.42671245,  1.197     ],
        [ 0.46800783,  0.4274254 ,  1.199     ],
        [ 0.47074342,  0.42813843,  1.2010001 ],
        [ 0.4726983 ,  0.42813843,  1.2010001 ],
        [ 0.47465318,  0.42813843,  1.2010001 ],
        [ 0.4777986 ,  0.4292079 ,  1.2040001 ]]])

# 平均二乗誤差の計算
def mse(array):
    if np.any(array == 0):
        return math.inf
    else:
        pca = PCA()
        mse = mean_squared_error(array, pca.fit_transform(array))
        print(f"mse: {mse}")
        return mse  #合ってるか不安

# ノードの除去
def reject_node(data, threshold=999):
    # データが欠落していたら    
    # if np.any(data[..., -1] == 0):
    #     print("has 0")
    #     return True

    # 周囲4点との差
    v_diff = np.linalg.norm(data[:-1]-data[1:], axis=2)
    h_diff = np.linalg.norm(data[:, :-1]-data[:, 1:], axis=2)
    # print(h_diff.shape)

    print(v_diff.max())
    print()
    print(h_diff.max())

    if v_diff.max() > threshold or h_diff.max() > threshold:
        print("too big diff")
        return True

    # まだ決めていない
    if mse(data) > 999999:
        print("too big mse")
        return True

    return False

if reject_node(data1):
    print("rejected")
else:
    print("not rejected")